# -*- coding: iso-8859-1 -*-
# Copyright (C) 2010 Ralf Schlatterbeck. All rights reserved
# Reichergasse 131, A-3411 Weidling
# ****************************************************************************
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# ****************************************************************************
# Dual License:
# If you need a proprietary license that permits you to add your own
# software without the need to publish your source-code under the GNU
# General Public License above, contact
# Reder, Christian Reder, A-2560 Berndorf, Austria, christian@reder.eu

import os
from tempfile                       import NamedTemporaryFile
from roundup.exceptions             import Reject
from roundup.cgi.TranslationService import get_translation

_ = lambda x : x

def dyndns_update (db, cl, nodeid, old_values) :
    f = NamedTemporaryFile ('wb', -1, 'conf', 'ddclient', '/var/run/roundup')
    print >> f, "# Configuration file for ddclient generated by roundup"
    print >> f, "#"
    print >> f, "# /etc/ddclient.conf"
    print >> f, ""
    print >> f, "pid=/var/run/ddclient.pid"
    print >> f, ""

    dyn = db.dyndns.getnode (db.dyndns.getnodeids () [0])
    if dyn.syslog :
        print >> f, "syslog=yes"
    if dyn.interface :
        print >> f, "use=if, if=%s" % dyn.interface
        if dyn.interface_skip :
            print >> f, "if-skip=%s" % dyn.interface
    elif dyn.web_url :
        print >> f, "use=web, web=%s" % dyn.web_url
        if dyn.web_skip :
            print >> f, "web-skip=%s" % dyn.web_skip
    elif dyn.fw_url :
        print >> f, "use=fw, fw=%s" % dyn.fw_url
        if dyn.fw_skip :
            print >> f, "fw-skip=%s" % dyn.fw_skip
        if dyn.fw_login :
            print >> f, "fw-login=%s" % dyn.fw_login
        if dyn.fw_password :
            print >> f, "fw-password=%s" % dyn.fw_password
    else :
        print >> f, "use=web, web=dyndns"
    print >> f, ""

    for sid in db.dyndns_service.getnodeids () :
        service = db.dyndns_service.getnode (sid)
        for k in 'protocol', 'server', 'login', 'password' :
            print >> f, "%s=%s" % (k, service [k])
        for h in db.dyndns_host.filter (None, dict (dyndns_service = sid)) :
            host = db.dyndns_host.getnode (h)
            if host.description :
                print >> f, "#", host.description
            print host.hostname
        print >> f, ""
    # FIXME: Notify a daemon to move the file in place
    f.close ()

# end def dyndns_update


def init (db) :
    if 'measurement' not in db.classes :
        return
    global _
    _   = get_translation \
        (db.config.TRACKER_LANGUAGE, db.config.TRACKER_HOME).gettext
    db.dyndns_host.react ("create", dyndns_update)
    db.dyndns_host.react ("set",    dyndns_update)
# end def init
