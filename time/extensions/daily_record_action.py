#! /usr/bin/python
# -*- coding: iso-8859-1 -*-
# Copyright (C) 2005 Dr. Ralf Schlatterbeck Open Source Consulting.
# Reichergasse 131, A-3411 Weidling.
# Web: http://www.runtux.com Email: office@runtux.com
# All rights reserved
# ****************************************************************************
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# ****************************************************************************
#
#++
# Name
#    Daily_Record_Action
#    Daily_Record_Edit_Action
#
# Purpose
#
#    Daily_Record_Action:
#    Create daily records for given week, redirect to edit form.
#
#    Daily_Record_Edit_Action:
#    Edit form for daily records: Remove some form variables if only
#    values generated by hidden attributes are present.
#
# Purpose
#--

from roundup.cgi.actions    import Action, EditItemAction
from roundup.cgi.exceptions import Redirect
from roundup.exceptions     import Reject
from roundup.cgi            import templating
from roundup.date           import Date, Interval, Range
from roundup                import hyperdb
from time                   import gmtime
from copy                   import copy

ymd = '%Y-%m-%d'

def pretty_range (start, end) :
    return ';'.join ([x.pretty (ymd) for x in (start, end)])
# end def pretty_range

def week_from_date (date) :
    wday  = gmtime (date.timestamp ())[6]
    start = date + Interval ("%sd" % -wday)
    end   = date + Interval ("%sd" % (6 - wday))
    return start, end
# end def week_from_date

def date_range (db, filterspec) :
    if 'date' in filterspec :
        r = Range (filterspec ['date'], Date)
        if r.to_value is None :
            start = end = r.from_value
        elif r.from_value is None or r.from_value == r.to_value :
            start = end = r.to_value
        else :
            start = r.from_value
            end   = r.to_value
    else :
        date       = Date ('.')
        date       = Date (str (date.local (db.getUserTimezone ())))
        start, end = week_from_date (date)
    start.hours = start.minutes = start.seconds = 0
    end.hours   = end.minutes   = end.seconds   = 0
    return start, end
# end def date_range

def from_week_number (year, week_no) :
    """ Get first thursday in year, then add days.
        >>> from_week_number (1998, 52)
        (<Date 1998-12-21.00:00:0.000000>, <Date 1998-12-27.00:00:0.000000>)
        >>> from_week_number (1998, 53)
        (<Date 1998-12-28.00:00:0.000000>, <Date 1999-01-03.00:00:0.000000>)
        >>> from_week_number (1999,  1)
        (<Date 1999-01-04.00:00:0.000000>, <Date 1999-01-10.00:00:0.000000>)
        >>> from_week_number (1999, 52)
        (<Date 1999-12-27.00:00:0.000000>, <Date 2000-01-02.00:00:0.000000>)
        >>> from_week_number (2000,  1)
        (<Date 2000-01-03.00:00:0.000000>, <Date 2000-01-09.00:00:0.000000>)
        >>> from_week_number (2000, 52)
        (<Date 2000-12-25.00:00:0.000000>, <Date 2000-12-31.00:00:0.000000>)
        >>> from_week_number (2001,  1)
        (<Date 2001-01-01.00:00:0.000000>, <Date 2001-01-07.00:00:0.000000>)
        >>> from_week_number (2001, 52)
        (<Date 2001-12-24.00:00:0.000000>, <Date 2001-12-30.00:00:0.000000>)
        >>> from_week_number (2002,  1)
        (<Date 2001-12-31.00:00:0.000000>, <Date 2002-01-06.00:00:0.000000>)
        >>> from_week_number (2002, 52)
        (<Date 2002-12-23.00:00:0.000000>, <Date 2002-12-29.00:00:0.000000>)
        >>> from_week_number (2003,  1)
        (<Date 2002-12-30.00:00:0.000000>, <Date 2003-01-05.00:00:0.000000>)
        >>> from_week_number (2003, 52)
        (<Date 2003-12-22.00:00:0.000000>, <Date 2003-12-28.00:00:0.000000>)
        >>> from_week_number (2004,  1)
        (<Date 2003-12-29.00:00:0.000000>, <Date 2004-01-04.00:00:0.000000>)
        >>> from_week_number (2004, 52)
        (<Date 2004-12-20.00:00:0.000000>, <Date 2004-12-26.00:00:0.000000>)
        >>> from_week_number (2004, 53)
        (<Date 2004-12-27.00:00:0.000000>, <Date 2005-01-02.00:00:0.000000>)
        >>> from_week_number (2005,  1)
        (<Date 2005-01-03.00:00:0.000000>, <Date 2005-01-09.00:00:0.000000>)
        >>> from_week_number (2005, 29)
        (<Date 2005-07-18.00:00:0.000000>, <Date 2005-07-24.00:00:0.000000>)
        >>> from_week_number (2005, 52)
        (<Date 2005-12-26.00:00:0.000000>, <Date 2006-01-01.00:00:0.000000>)
        >>> from_week_number (2006,  1)
        (<Date 2006-01-02.00:00:0.000000>, <Date 2006-01-08.00:00:0.000000>)
        >>> from_week_number (2006, 52)
        (<Date 2006-12-25.00:00:0.000000>, <Date 2006-12-31.00:00:0.000000>)
        >>> from_week_number (2007,  1)
        (<Date 2007-01-01.00:00:0.000000>, <Date 2007-01-07.00:00:0.000000>)
        >>> from_week_number (2007, 52)
        (<Date 2007-12-24.00:00:0.000000>, <Date 2007-12-30.00:00:0.000000>)
        >>> from_week_number (2008,  1)
        (<Date 2007-12-31.00:00:0.000000>, <Date 2008-01-06.00:00:0.000000>)
        >>> from_week_number (2008, 52)
        (<Date 2008-12-22.00:00:0.000000>, <Date 2008-12-28.00:00:0.000000>)
        >>> from_week_number (2009,  1)
        (<Date 2008-12-29.00:00:0.000000>, <Date 2009-01-04.00:00:0.000000>)
        >>> from_week_number (2009, 52)
        (<Date 2009-12-21.00:00:0.000000>, <Date 2009-12-27.00:00:0.000000>)
        >>> from_week_number (2009, 53)
        (<Date 2009-12-28.00:00:0.000000>, <Date 2010-01-03.00:00:0.000000>)
        >>> from_week_number (2010,  1)
        (<Date 2010-01-04.00:00:0.000000>, <Date 2010-01-10.00:00:0.000000>)
        >>> from_week_number (2010, 52)
        (<Date 2010-12-27.00:00:0.000000>, <Date 2011-01-02.00:00:0.000000>)
    """
    for i in range (1, 8) :
        date = Date ('%s-01-%02d' % (year, i))
        if gmtime (date.timestamp ()) [6] == 3 : # Thursday
            date = date + Interval ('%dd' % ((week_no - 1) * 7))
            return week_from_date (date)
    assert (0)
# end def from_week_number

def prev_week (db, request) :
    start, end = date_range (db, request.filterspec)
    n_end   = start - Interval ('1d')
    n_start = n_end - Interval ('6d')
    date    = pretty_range (n_start, n_end)
    request = copy (request)
    request.filterspec = copy (request.filterspec)
    request.filterspec ['date'] = date
    return request.indexargs_url \
        ( ''
        , { ':action'   : 'daily_record_action'
          , ':template' : 'edit'
          , ':filter'   : ','.join (request.filterspec.keys ())
          }
        )
# end def prev_week

def next_week (db, request) :
    start, end = date_range (db, request.filterspec)
    n_start = end     + Interval ('1d')
    n_end   = n_start + Interval ('6d')
    date    = pretty_range (n_start, n_end)
    request = copy (request)
    request.filterspec = copy (request.filterspec)
    request.filterspec ['date'] = date
    return request.indexargs_url \
        ( ''
        , { ':action'   : 'daily_record_action'
          , ':template' : 'edit'
          , ':filter'   : ','.join (request.filterspec.keys ())
          }
        )
# end def next_week

class Weekno_Action (Action) :
    name = 'weekno_action'
    permissionType = 'View'

    def handle (self) :
        request    = templating.HTMLRequest (self.client)
        filterspec = request.filterspec
        try :
            weeknostr = filterspec ['weekno']
        except KeyError :
            weeknostr = request.form ['weekno'].value
        try :
            year, weekno = [int (i) for i in weeknostr.split ('/')]
        except ValueError :
            year = Date ('.').year
            weekno = int (weeknostr)
        filterspec ['date'] = pretty_range (* from_week_number (year, weekno))
        url = request.indexargs_url \
            ( ''
            , { ':action'        : 'daily_record_action'
              , ':template'      : 'edit'
              , ':sort'          : 'date'
              , ':group'         : 'user'
              , ':filter'        : ','.join (filterspec.keys ())
              , 'weekno'         : None
              }
            )
        raise Redirect, url
    # end def handle
# end class Weekno_Action

class Daily_Record_Common (Action) :
    name = 'daily_record'
    permissionType = 'Edit'

    def create_daily_records (self) :
        # figure the request
        self.request    = request = templating.HTMLRequest (self.client)
        filterspec      = request.filterspec
        columns         = request.columns
        assert (request.classname == 'daily_record')
        start, end      = date_range (self.db, filterspec)
        self.start      = start
        self.end        = end
        max             = start + Interval ('31d')
        if end > max :
            msg = \
                ( "Error: Interval may not exceed one month: %s"
                % ' to '.join ([i.pretty (ymd) for i in (start, end)])
                )
            end = max
            request.filterspec ['date'] = pretty_range (start, end)
            url = request.indexargs_url \
                ( ''
                , { ':action'        : 'search'
                  , ':template'      : 'edit'
                  , ':sort'          : 'date'
                  , ':group'         : 'user'
                  , ':filter'        : ','.join (request.filterspec.keys ())
                  , ':error_message' : msg
                  }
                )
            raise Redirect, url
        d = start
        if 'user' in filterspec :
            self.user = filterspec ['user'][0]
        else :
            self.user = self.db.getuid ()
        while d <= end :
            try :
                x = self.db.daily_record.create \
                    ( user = self.user
                    , date = d
                    )
                self.db.commit ()
            except Reject :
                pass
            d = d + Interval ('1d')
    # end def create_daily_records
# end class Daily_Record_Common

class Daily_Record_Action (Daily_Record_Common) :

    def handle (self) :
        self.create_daily_records ()
        self.request.filterspec = \
            { 'date' : pretty_range (self.start, self.end)
            , 'user' : self.user
            }
        url = self.request.indexargs_url \
            ( ''
            , { ':action'   : 'search'
              , ':template' : 'edit'
              , ':sort'     : 'date'
              , ':group'    : 'user'
              , ':filter'   : ','.join (self.request.filterspec.keys ())
              }
            )
        raise Redirect, url
    # end def handle
# end class Daily_Record_Action

class Daily_Record_Edit_Action (EditItemAction) :
    def _editnodes (self, props, links) :
        # use props.items here, with iteritems we get a RuntimeError
        # "dictionary changed size during iteration"
        for (cl, id), val in props.items () :
            if cl == 'time_record' :
                if int (id) < 0 and val.keys () == ['daily_record'] :
                    del props [(cl, id)]
        return EditItemAction._editnodes (self, props, links)
    # end def _editnodes
# end class Daily_Record_Edit_Action

class Daily_Record_Submit (Daily_Record_Edit_Action, Daily_Record_Common) :
    def handle (self) :
        self.create_daily_records ()
        try :
            # returns only in error case
            return Daily_Record_Edit_Action.handle (self)
        except Redirect :
            pass
        # figure the request
        request    = self.request
        filterspec = request.filterspec
        sort       = request.sort
        group      = request.group
        klass      = self.db.getclass (request.classname)
        s_open     = self.db.daily_record_status.lookup ('open')
        s_submit   = self.db.daily_record_status.lookup ('submitted')
        msg        = []
        for itemid in klass.filter (None, filterspec, sort, group) :
            try :
                if klass.get (itemid, 'status') == s_open :
                    klass.set (itemid, status = s_submit)
            except Reject, cause :
                msg.append (str (cause).replace ("\n", "<br>"))
        args = \
            { ':action'        : 'search'
            , ':template'      : 'edit'
            , ':sort'          : 'date'
            , ':group'         : 'user'
            , ':filter'        : ','.join (filterspec.keys ())
            }
        if msg :
            self.db.rollback ()
            args [':error_message'] = "<br>".join (msg)
        else :
            self.db.commit ()
        url = request.indexargs_url ('', args)
        raise Redirect, url
    # end def handle
# end class Daily_Record_Submit

def init (instance) :
    actn = instance.registerAction
    actn ('daily_record_action',      Daily_Record_Action)
    actn ('daily_record_edit_action', Daily_Record_Edit_Action)
    actn ('daily_record_submit',      Daily_Record_Submit)
    actn ('weekno_action',            Weekno_Action)
    util = instance.registerUtil
    util ('next_week',                next_week)
    util ('prev_week',                prev_week)
# end def init
