#! /usr/bin/python
# -*- coding: iso-8859-1 -*-
# Copyright (C) 2005 Dr. Ralf Schlatterbeck Open Source Consulting.
# Reichergasse 131, A-3411 Weidling.
# Web: http://www.runtux.com Email: office@runtux.com
# All rights reserved
# ****************************************************************************
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# ****************************************************************************
#
#++
# Name
#    Daily_Record_Action
#    Daily_Record_Edit_Action
#
# Purpose
#
#    Daily_Record_Action:
#    Create daily records for given week, redirect to edit form.
#
#    Daily_Record_Edit_Action:
#    Edit form for daily records: Remove some form variables if only
#    values generated by hidden attributes are present.
#
# Purpose
#--

from roundup.cgi.actions    import Action, EditItemAction
from roundup.cgi.exceptions import Redirect
from roundup.exceptions     import Reject
from roundup.cgi            import templating
from roundup.date           import Date, Interval, Range
from roundup                import hyperdb
from time                   import gmtime
from copy                   import copy

ymd = '%Y-%m-%d'

def date_range (db, filterspec) :
    if 'date' in filterspec :
        r = Range (filterspec ['date'], Date)
        if r.to_value is None :
            start = end = r.from_value
        elif r.from_value is None or r.from_value == r.to_value :
            start = end = r.to_value
        else :
            start = r.from_value
            end   = r.to_value
    else :
        date       = Date ('.')
        date       = Date (str (date.local (db.getUserTimezone ())))
        wday       = gmtime (date.timestamp ())[6]
        start      = date + Interval ("%sd" % -wday)
        end        = date + Interval ("%sd" % (6 - wday))
    start.hours = start.minutes = start.seconds = 0
    end.hours   = end.minutes   = end.seconds   = 0
    return start, end
# end def date_range

def prev_week (db, request) :
    start, end = date_range (db, request.filterspec)
    n_end   = start - Interval ('1d')
    n_start = n_end - Interval ('6d')
    date    = ';'.join ([x.pretty (ymd) for x in (n_start, n_end)])
    request = copy (request)
    request.filterspec = copy (request.filterspec)
    request.filterspec ['date'] = date
    return request.indexargs_url \
        ( ''
        , { ':action'   : 'daily_record_action'
          , ':template' : 'edit'
          }
        )
# end def prev_week

def next_week (db, request) :
    start, end = date_range (db, request.filterspec)
    n_start = end     + Interval ('1d')
    n_end   = n_start + Interval ('6d')
    date    = ';'.join ([x.pretty (ymd) for x in (n_start, n_end)])
    request = copy (request)
    request.filterspec = copy (request.filterspec)
    request.filterspec ['date'] = date
    return request.indexargs_url \
        ( ''
        , { ':action'   : 'daily_record_action'
          , ':template' : 'edit'
          }
        )
# end def next_week

class Daily_Record_Action (Action) :
    name = 'daily_record'
    permissionType = 'View'

    def handle (self) :
        ''' Export the specified search query as CSV. '''
        # figure the request
        request    = templating.HTMLRequest (self.client)
        filterspec = request.filterspec
        columns    = request.columns
        assert (request.classname == 'daily_record')
        start, end = date_range (self.db, filterspec)
        max = start + Interval ('31d')
        if end > max :
            msg = \
                ( "Error: Interval may not exceed one month: %s"
                % ' to '.join ([i.pretty (ymd) for i in (start, end)])
                )
            end = max
            request.filterspec ['date'] = \
                '%s;%s' % (start.pretty (ymd), end.pretty (ymd))
            url = request.indexargs_url \
                ( ''
                , { ':action'        : 'search'
                  , ':template'      : 'edit'
                  , ':sort'          : 'date'
                  , ':group'         : 'user'
                  , ':error_message' : msg
                  }
                )
            raise Redirect, url
        d = start
        while d <= end :
            try :
                x = self.db.daily_record.create \
                    ( user = self.db.getuid ()
                    , date = d
                    )
                self.db.commit ()
            except Reject :
                pass
            d = d + Interval ('1d')
        if 'user' in filterspec :
            user = filterspec ['user'][0]
        else :
            user = self.db.getuid ()
        request.filterspec = \
            { 'date' : '%s;%s' % (start.pretty (ymd), end.pretty (ymd))
            , 'user' : user
            }
        url = request.indexargs_url \
            ( ''
            , { ':action'   : 'search'
              , ':template' : 'edit'
              , ':sort'     : 'date'
              , ':group'    : 'user'
              }
            )
        raise Redirect, url
    # end def handle
# end class Daily_Record_Action

class Daily_Record_Edit_Action (EditItemAction) :
    def _editnodes (self, props, links) :
        # use props.items here, otherwise we get a RuntimeError
        # "dictionary changed size during iteration"
        for (cl, id), val in props.items () :
            if cl == 'time_record' :
                if int (id) < 0 and val.keys () == ['daily_record'] :
                    del props [(cl, id)]
        return EditItemAction._editnodes (self, props, links)
    # end def _editnodes
# end class Daily_Record_Edit_Action

def init (instance) :
    actn = instance.registerAction
    actn ('daily_record_action',      Daily_Record_Action)
    actn ('daily_record_edit_action', Daily_Record_Edit_Action)
    util = instance.registerUtil
    util ('next_week',                next_week)
    util ('prev_week',                prev_week)
# end def init
