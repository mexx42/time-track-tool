#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import sys
import os
import cgi
from optparse               import OptionParser
from roundup                import instance
from roundup.cgi.templating import HTMLRequest

class Request :
    """ Fake html request """
    rfile = None
    def start_response (self, a, b) :
        pass
    # end def start_response
# end class Request

parser = OptionParser (usage = '%prog [options] <class>')
parser.add_option \
    ( "-a", "--action"
    , dest    = "action"
    , help    = "Action for CSV output (selects CSV class), "
                "for summary/staff report use CSV_Summary_Report or "
                "CSV_Staff_Report, respectively."
    , default = 'Export_CSV_Names'
    )
parser.add_option \
    ( "-c", "--column"
    , dest    = "column"
    , help    = "Column in database, can be specified more than once,"
                " if unspecified, all columns are selected"
    , default = []
    , action  = 'append'
    )
parser.add_option \
    ( "-d", "--database-directory"
    , dest    = "database_directory"
    , help    = "Directory of the roundup installation"
    , default = '.'
    )
parser.add_option \
    ( "-f", "--filter"
    , dest    = "filter"
    , help    = "Filter-column=value in DB, can be specified more than once"
    , default = []
    , action  = 'append'
    )
parser.add_option \
    ( "-g", "--group"
    , dest    = "group"
    , help    = "Grouping-column in database, can be specified more than once"
    , default = []
    , action  = 'append'
    )
parser.add_option \
    ( "-s", "--sort"
    , dest    = "sort"
    , help    = "Sorting-column in database, can be specified more than once"
    , default = []
    , action  = 'append'
    )
parser.add_option \
    ( "-o", "--output-file"
    , dest    = "outfile"
    , help    = "Output-file, '-' is stdout"
    , default = '-'
    )
parser.add_option \
    ( "-q", "--query"
    , dest    = "query"
    , help    = "Query-string or url (from browser) overrides all other "
                "query-related options."
    )
parser.add_option \
    ( "-u", "--user"
    , dest    = "user"
    , help    = "User to Database open as"
    , default = 'admin'
    )
opt, args = parser.parse_args ()

if len (args) != 1 :
    parser.error ('Need exactly one argument, the class name')
    exit (23)

dir     = opt.database_directory
tracker = instance.open (dir)
db      = tracker.open (opt.user)
sys.path.insert (1, os.path.join (dir, 'extensions'))
from ExportCSVNamesAction import *
from summary              import CSV_Summary_Report, CSV_Staff_Report

classname = args [0]

env   = dict (PATH_INFO = '', REQUEST_METHOD = 'GET')
filt  = ','.join ((f.split ('=', 1)[0] for f in opt.filter))
if opt.query :
    env ['QUERY_STRING'] = opt.query.split ('?', 1) [-1]
else :
    query = []
    query.append ('@action=%s'  % opt.action)
    query.append ('@columns=%s' % ','.join (opt.column))
    query.append ('@group=%s'   % ','.join (opt.group))
    query.append ('@sort=%s'    % ','.join (opt.sort))
    query.append ('@filter=%s'  % filt)
    query.extend (opt.filter)
    env ['QUERY_STRING'] = '&'.join (query)

req = Request ()
cli = tracker.Client (tracker, req, env, None)
cli.db        = db
cli.language  = None
cli.classname = classname
cli.userid    = db.getuid ()

action = 'ExportCSVNamesAction'
if ':action' in cli.form :
    action = cli.form [':action'].value.lower ()
elif '@action' in cli.form :
    action = cli.form ['@action'].value.lower ()

try :
    cls = tracker.cgi_actions [action]
except KeyError :
    cls = globals () [action]

exp = cls (cli)
if opt.outfile != '-' :
    out = open (opt.outfile, "w")
else :
    out = sys.stdout
exp.handle (outfile = out)
