#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import sys
import os
from roundup           import date
from roundup           import instance

dir     = os.getcwd ()
tracker = instance.open (dir)
db      = tracker.open ('admin')

def fix_products () :
    """ Search for products without a sap_material number
        check if the product has ever been used.
        Output list of products that are never used and a separate list
        of products that *are* used.
    """
    used   = []
    unused = []
    for id in db.product.getnodeids (retired = True) :
        prd = db.product.getnode (id)
        assert prd.sap_material is None
        issues = db.support.filter (None, dict (product = id))
        assert not issues
        print "Destroying: product%s: %s" % (id, prd.name)
        db.product.destroy (id)
    for id in db.product.getnodeids (retired = False) :
        prd = db.product.getnode (id)
        if prd.sap_material is not None :
            continue
        issues = db.support.filter (None, dict (product = id))
        if issues :
            used.append (prd)
        else :
            unused.append (prd)
    for prd in sorted (used, key = lambda x : x.name) :
        print "Used: product%s valid:%s: %s" % (prd.id, prd.valid, prd.name)
        try :
            num = str (int (prd.name))
            db.product.set (prd.id, sap_material = num)
        except ValueError :
            db.product.set (prd.id, sap_material = 'legacy-%s' % prd.id)
    for prd in sorted (unused, key = lambda x : x.name) :
        print "Unused: product%s valid:%s: %s" % (prd.id, prd.valid, prd.name)
        db.product.destroy (prd.id)

fix_products ()
db.commit()
