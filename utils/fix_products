#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import sys
import os
from roundup           import date
from roundup           import instance

from sync_products     import normalize_name

dir     = os.getcwd ()
tracker = instance.open (dir)
db      = tracker.open ('admin')

def fix_products () :
    names = {}
    for id in db.product.getnodeids (retired = False) :
        prd = db.product.getnode (id)
        if prd.prodcat is None :
            continue
        pc  = db.prodcat.getnode (prd.prodcat)
        assert (pc.level == 4)
        if pc.name in names :
            print "duplicate product: %s/%s %s -- %s" \
                % (names [pc.name], id, pc.name, prd.name)
            for sid in db.support.filter (None, dict (product = id)) :
                print "Changing product for support%s %s->%s" \
                    % (sid, id, names [pc.name])
                db.support.set (sid, product = names [pc.name])
            db.product.retire (id)
        else :
            product_family   = pc.parent
            product_use_case = db.prodcat.get (pc.parent, 'parent')
            product_line     = db.prodcat.get (product_use_case, 'parent')
            assert (db.prodcat.get (product_family,   'level') == 3)
            assert (db.prodcat.get (product_use_case, 'level') == 2)
            assert (db.prodcat.get (product_line,     'level') == 1)
            db.product.set \
                ( id
                , description      = prd.name
                , name             = pc.name
                , product_family   = product_family
                , product_use_case = product_use_case
                , product_line     = product_line
                , prodcat          = None
                )
            names [pc.name] = id

lvl_names = ['product_line', 'product_use_case', 'product_family']

def fix_prodcats () :
    lvl = [{}, {}, {}]
    for id in db.prodcat.getnodeids (retired = False) :
        pc = db.prodcat.getnode (id)
        if pc.level > 3 :
            #print "retire level 4: prodcat%s" % id
            db.prodcat.retire (id)
            continue
        assert pc.level
        name = normalize_name (pc.name)
        lv   = int (pc.level - 1)
        if name in lvl [lv] :
            prods = db.product.filter (None, {lvl_names [lv] : id})
            for p in prods :
                print "Fixing %s (%s) of product%s %s->%s" \
                    % (lvl_names [lv], lv, p, id, lvl [lv][name])
                db.product.set (p, ** {lvl_names [lv] : lvl [lv][name]})
            print "retire level %s: prodcat%s" % (lv + 1, id)
            db.prodcat.retire (id)
        else :
            lvl [lv][name] = id

fix_products ()
fix_prodcats ()
db.commit()
