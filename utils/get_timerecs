#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import sys
import os
from roundup           import date
from roundup           import instance
from roundup.hyperdb   import Link, Multilink, Date
from argparse          import ArgumentParser

def main () :
    dir = os.getcwd ()
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'user'
        , help    = 'User for whom data is exported'
        )
    cmd.add_argument \
        ( 'daterange'
        , help    = 'Date range for export'
        )
    cmd.add_argument \
        ( '-c', '--vacation_correction'
        , dest    = 'vcorr'
        , help    = 'Export vacation corrections, too'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-d', '--directory'
        , dest    = 'dir'
        , help    = 'Tracker instance directory, default=%(default)s'
        , default = '.'
        )
    cmd.add_argument \
        ( '-D', '--dynuser'
        , dest    = 'dynuser'
        , help    = 'Export dynamic user data too for given range'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-t', '--no-timerecs'
        , dest    = 'do_timerecs'
        , help    = 'Do not export time records (and daily records)'
        , action  = 'store_false'
        , default = True
        )
    opt = cmd.parse_args ()

    sys.path.insert (0, os.path.join (opt.dir, 'lib'))
    from common       import ymd
    from user_dynamic import first_user_dynamic, next_user_dynamic
    tracker = instance.open (opt.dir)
    db      = tracker.open ('admin')

    userid  = db.user.lookup (opt.user)
    sdate   = opt.daterange
    filter  = dict (user = userid, date = sdate)

    wpmax   = 3 # number of reserved time_wp ids
    wpdict  = {}

    print "from roundup import date"
    print ""
    if opt.dynuser :
        print "def import_data_%s (db, user, dep, olo) :" % userid
    else :
        print "def import_data_%s (db, user) :" % userid
    ident = '    '
    if opt.dynuser :
        dates = sdate.split (';')
        if len (dates) == 2 :
            dstart, dend = dates
            dstart = date.Date (dstart)
            dend   = date.Date (dend)
        else :
            assert len (dates) == 1
            dstart = date.Date (dates [0])
            dend   = None
        ud = first_user_dynamic (db, user = userid, date = dstart)
        while ud :
            if ud.overtime_period :
                otp = db.overtime_period.getnode (ud.overtime_period)
                print ident, \
                    ( "sd = dict (months = %s, required_overtime = %s,"
                      " weekly = %s)"
                    % (otp.months, otp.required_overtime, otp.weekly)
                    )
                print ident, "otp = db.overtime_period.filter (None, sd)"
                print ident, "assert len (otp) == 1"
                print ident, "otp = otp [0]"
            else :
                print ident, "otp = None"
            print ident, "db.user_dynamic.create \\"
            for n, (pname, prop) in enumerate \
                (db.user_dynamic.properties.iteritems ()) :
                if isinstance (prop, Link) or isinstance (prop, Multilink) :
                    continue
                delim = ['(', ','][bool (n)]
                value = getattr (ud, pname)
                if value is None :
                    continue
                if isinstance (prop, Date) :
                    value = 'date.Date ("%s")' % value
                print ident, "    %s %-18s = %s" \
                    % (delim, pname, value)
            print ident, "    , department         = dep"
            print ident, "    , org_location       = olo"
            print ident, "    , overtime_period    = otp"
            print ident, "    , user               = user"
            print ident, "    , vac_aliq           = '%s'" % ud.vac_aliq
            print ident, "    )"
            ud = next_user_dynamic (db, ud)
            if ud and dend and ud.valid_from > dend :
                break
    if opt.vcorr :
        for vcid in db.vacation_correction.filter (None, filter) :
            vc = db.vacation_correction.getnode (vcid)
            d  = vc.date.pretty (ymd)
            print ident, "vcorr = db.vacation_correction.create \\"
            print ident, "    ( user     = user"
            print ident, "    , date     = date.Date ('%s')" % d
            print ident, "    , absolute = %s" % vc.absolute
            print ident, "    , days     = %s" % vc.days
            print ident, "    )"
    if opt.do_timerecs :
        for dri in db.daily_record.filter (None, filter) :
            dr = db.daily_record.getnode (dri)
            print ident, "dr = db.daily_record.create \\"
            print ident, "    ( user = user"
            print ident, "    , date = date.Date ('%s')" % dr.date.pretty (ymd)
            print ident, "    , weekend_allowed   = %s"  % dr.weekend_allowed
            print ident, "    , required_overtime = %s"  % dr.required_overtime
            print ident, "    )"
            for tri in dr.time_record :
                tr = db.time_record.getnode (tri)
                print ident, "db.time_record.create \\"
                print ident, "    ( daily_record  = dr"
                if tr.start :
                    print ident, "    , start         = '%s'" % tr.start
                    print ident, "    , end           = '%s'" % tr.end
                else :
                    print ident, "    , duration      = %s" % tr.duration
                if tr.time_activity :
                    print ident, "    , time_activity = '%s'" % tr.time_activity
                print ident, "    , work_location = '%s'" % tr.work_location
                if tr.wp in wpdict :
                    new_wpid = wpdict [tr.wp]
                elif tr.wp is None :
                    new_wpid = None
                else :
                    wp = db.time_wp.getnode (tr.wp)
                    tp = db.time_project.getnode (wp.project)
                    if wp.travel :
                        new_wpid = 3
                    elif tp.is_public_holiday :
                        new_wpid = 1
                    elif tp.is_vacation :
                        new_wpid = 44
                    elif tp.no_overtime :
                        new_wpid = 2
                    else :
                        wpmax += 1
                        new_wpid = wpmax
                    wpdict [tr.wp] = new_wpid
                if new_wpid :
                    print ident, "    , wp            = '%s'" % new_wpid
                print ident, "    )"
    print ident, "db.commit ()"
    print "# end def import_data_%s" % userid

if __name__ == '__main__' :
    main ()
