#!/usr/bin/python

from __future__ import print_function
from __future__ import absolute_import

import os
import sys
import xmlrpclib
from   datetime          import datetime
from   argparse          import ArgumentParser
from   rsclib.autosuper  import autosuper
from   rsclib.pycompat   import text_type
from   roundup           import instance
from   roundup.date      import Date
try :
    from ssl import SSLContext, PROTOCOL_SSLv23
except ImportError :
    SSLContext = None

def date_from_xml (s) :
    assert s.startswith ('<Date ')
    assert s.endswith   ('>')
    s = s [6:-1]
    s = s.replace (' ', '.')
    return Date (s)
# end def date_from_xml

class PR_Sync (autosuper) :
    """ Sync Time-Tracker data from remote time tracker vie XMLRPC.
    """

    property_classes = dict \
        (( ('department.part_of',            'department')
         , ('org_location.organisation',     'organisation')
         , ('org_location.location',         'location')
         , ('sap_cc.deputy',                 'user')
         , ('sap_cc.responsible',            'user')
         , ('sap_cc.purchasing_agent',       'user')
         , ('time_project.department',       'department')
         , ('time_project.deputy',           'user')
         , ('time_project.nosy',             'user')
         , ('time_project.organisation',     'organisation')
         , ('time_project.responsible',      'user')
         , ('time_project.purchasing_agent', 'user')
         , ('time_project.status',           'time_project_status')
         , ('user.department',               'department')
         , ('user.org_location',             'org_location')
         , ('user.status',                   'user_status')
        ))

    def __init__ (self, args) :
        proxy_args     = dict (allow_none = True)
        if SSLContext and args.disable_cert_check :
            proxy_args ['context'] = SSLContext (PROTOCOL_SSLv23)
        self.srv       = xmlrpclib.ServerProxy (args.url, ** proxy_args)
        tracker        = instance.open (args.database_directory)
        self.db        = tracker.open (args.user)
        sys.path.insert (1, os.path.join (args.database_directory, 'lib'))
        global common
        common         = __import__ ('common')
        self.args      = args
        self.update    = args.update
        self.classname = None
        self.idmap     = {}
        self.pendmap   = {}
        self.now       = Date ('.')
        self.uvalid    = None
        self.obsolete  = None
        self.tc_open   = None
    # end def __init__

    # Check methods that check if a class item is valid
    def check_organisation (self, item) :
        d = item ['valid_to']
        if d :
            d = date_from_xml (d)
        return not d or d > self.now
    # end def check_organisation
    check_department = check_organisation

    def check_time_project (self, item) :
        if not self.tc_open :
            self.tc_open = self.db.time_project_status.lookup ('Open')
        if item ['status'] != self.tc_open :
            return False
        return bool \
            (   not item ['approval_hr']
            and not item ['approval_required']
            and not item ['is_public_holiday']
            and not item ['is_special_leave']
            and not item ['is_vacation']
            and not item ['no_overtime']
            and ('only_hours' not in item or not item ['only_hours'])
            and item ['op_project']
            )
    # end def check_time_project

    def fix_time_project (self, item, id) :
        """ Add org_id-id as description """
        item ['description'] = '-'.join ((item ['organisation'] or '', id))
    # end def fix_time_project

    def check_user (self, user) :
        if user ['username'] in ('admin', 'anonymous') :
            return True
        if not self.uvalid :
            self.uvalid = self.srv.lookup ('user_status', 'valid')
        return user ['status'] == self.uvalid
    # end def check_user

    def fix_prop (self, value) :
        if isinstance (value, text_type) :
            return value.encode ('utf-8')
        return value
    # end def fix_prop

    def getpropclass (self, prop) :
        cn = self.classname
        return self.property_classes.get ('%s.%s' % (cn, prop), None)
    # end def getpropclass

    def map_id (self, prop, value) :
        if value is None :
            return None
        return self.idmap [self.getpropclass (prop)][value]
    # end def map_id

    def sync (self) :
        self.sync_class ('organisation', ('name', 'description'), ('valid_to',))
        self.sync_class ('location',     ('name', 'country'))
        self.sync_class ('org_location', ('name', 'location', 'organisation'))
        self.sync_pending ()
        self.sync_class \
            ('department', ('name', 'description', 'part_of'), ('valid_to',))
        self.sync_class \
            ('time_project_status', ('name', 'description', 'active'))
        # only once at beginning?
        self.sync_class \
            ( 'user_status'
            , ('name', 'description', 'is_nosy', 'ldap_group', 'roles')
            )
        self.sync_class \
            ( 'user'
            , ( 'username', 'address', 'alternate_addresses', 'department'
              , 'org_location', 'realname', 'status'
              )
            , key       = 'username'
            , roles     = 'User,Nosy'
            , dont_sync = dict.fromkeys (('1', '2'))
            )
        self.sync_class \
            ( 'sap_cc'
            , ( 'name', 'description', 'responsible', 'deputy'
              , 'purchasing_agent'
              )
            , required = ('responsible',)
            )
        self.sync_class \
            ( 'time_project'
            , ( 'name', 'department', 'deputy', 'description'
              , 'organisation', 'responsible', 'status'
              , 'purchasing_agent'
              )
            , ( 'approval_hr', 'approval_required', 'is_public_holiday'
              , 'is_special_leave', 'is_vacation', 'no_overtime'
              , 'only_hours', 'op_project'
              )
            , required = ('responsible',)
            )

        self.sync_pending ()
        if self.update :
            self.db.commit ()
    # end def sync

    def sync_class \
        ( self
        , classname
        , propnames
        , additional = ()
        , key        = 'name'
        , required   = ()
        , dont_sync  = {}
        , **default
        ) :
        self.verbose ('Syncing: %s' % classname, level = 2)
        assert key in propnames
        for r in required :
            assert r in propnames
        self.classname = classname
        cls = self.db.getclass (classname)
        self.idmap [classname] = {}
        mapped     = {}
        nonmapped  = {}
        pending    = {}
        for p in propnames :
            pkey = self.getpropclass (p)
            if pkey :
                if pkey in self.idmap and pkey != classname :
                    mapped [p] = 1
                else :
                    pending [p] = 1
            else :
                nonmapped [p] = 1
        if pending :
            self.pendmap [classname] = {}
        for id in self.srv.filter (classname, None, {}) :
            if id in dont_sync :
                continue
            item = self.srv.display (classname + id, * (propnames + additional))
            valid = True
            check = getattr (self, 'check_' + classname, None)
            if check :
                valid = check (item)
            fixer = getattr (self, 'fix_' + classname, None)
            if fixer :
                fixer (item, id)
            lid = None
            try :
                lid = cls.lookup (self.fix_prop (item [key]))
            except KeyError :
                pass
            if valid :
                self.verbose \
                    ("Syncing: %s%s %s" % (classname, id, item), level = 3)
                if not lid :
                    params = dict (default)
                    params.update \
                        ( (k, self.fix_prop (item [k]))
                          for k in nonmapped if item [k] is not None
                        )
                    for k in mapped :
                        try :
                            v = self.map_id (k, item [k])
                        except KeyError :
                            if k in item :
                                print \
                                    ( "WARN: Not in map: %s %s:%s"
                                    % (classname, k, item [k])
                                    )
                            else :
                                print \
                                    ( "WARN: Not in class: %s %s"
                                    % (classname, k)
                                    )
                            v = None
                        if v is None :
                            continue
                        params [k] = v
                    for r in required :
                        if r not in params :
                            print \
                                ( 'WARN: Not in params: "%s" -- '
                                  'not converting %s%s'
                                % (r, classname, id)
                                )
                            break
                    else :
                        self.verbose ("Create: %s %s" % (classname, params))
                        if self.update :
                            lid = cls.create (** params)
                else :
                    litem = cls.getnode (lid)
                    d = {}
                    for p in default :
                        ritem = self.fix_prop (default [p])
                        if litem [p] is None :
                            d [p] = ritem
                    if 'roles' in default and 'roles' not in d :
                        roles = dict.fromkeys (common.role_list (litem.roles))
                        roles_old = dict (roles)
                        for r in common.role_list (default ['roles']) :
                            if r not in roles :
                                roles [r] = 1
                        if roles != roles_old :
                            d ['roles'] = ','.join (roles.keys ())
                    for p in nonmapped :
                        ritem = self.fix_prop (item [p])
                        if ritem != litem [p] :
                            d [p] = ritem
                    for p in mapped :
                        try :
                            v = self.map_id (p, item [p])
                        except KeyError :
                            print \
                                ( "WARN: Not in map: %s %s:%s"
                                % (classname, p, item [p])
                                )
                            v = None
                        if v is None :
                            continue
                        if v != litem [p] :
                            d [p] = v
                    if (d) :
                        self.verbose ("Set: %s%s %s" % (classname, lid, d))
                        if self.update :
                            cls.set (lid, ** d)
                self.idmap [classname][id] = lid
                if pending :
                    self.pendmap [classname][lid] = dict \
                        ((k, item [k]) for k in pending if item [k] is not None)
            elif lid :
                if classname != 'user' :
                    self.verbose ("Retire: %s%s" % (classname, lid))
                    if self.update :
                        cls.retire (lid)
                else :
                    if not self.obsolete :
                        self.obsolete = self.db.user_status.lookup ('obsolete')
                    if item ['status'] != self.obsolete :
                        self.verbose ("Marking obsolete: user%s" % lid)
                        if self.update :
                            cls.set (lid, status = self.obsolete)
        if self.update :
            self.db.commit ()
    # end def sync_class

    def sync_pending (self) :
        for cn in self.pendmap :
            self.classname = cn
            cls = self.db.getclass (cn)
            for lid, props in self.pendmap [cn].iteritems () :
                litem = cls.getnode (lid)
                d = {}
                for k, v in props.iteritems () :
                    lv = self.map_id (k, v)
                    if lv != litem [k] :
                        d [k] = lv
                if d :
                    self.verbose ("Set: %s%s %s" % (cn, lid, d))
                    if self.update :
                        cls.set (lid, ** d)
        self.pendmap = {}
    # end def sync_pending

    def verbose (self, msg, level = 1, * args) :
        if self.args.verbose >= level :
            print (msg, *args)
    # end def verbose

# end class PR_Sync

def main () :
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'url'
        , help   = 'XMLRPC URL of remote tracker'
        )
    if SSLContext :
        cmd.add_argument \
            ( "-C", "--disable-cert-check"
            , help    = "Disable certificate check for https connection"
            , default = False
            , action  = 'store_true'
            )
    cmd.add_argument \
        ( "-d", "--database-directory"
        , dest    = "database_directory"
        , help    = "Directory of the roundup installation"
        , default = '.'
        )
    cmd.add_argument \
        ( "-u", "--update"
        , help    = "Update roundup with info remote installation"
        , default = False
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-U", "--user"
        , help    = "Database user"
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-v', '--verbose'
        , dest   = 'verbose'
        , help   = 'Verbose output'
        , action = 'count'
        )
    args = cmd.parse_args ()

    sync = PR_Sync (args)
    sync.sync ()
# end def main

if __name__ == '__main__' :
    main ()
