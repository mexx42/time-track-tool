#!/usr/bin/python

import os
import sys
from   csv      import DictReader
from   argparse import ArgumentParser
from   roundup  import instance

org_tr = \
    { 'TTTech AG'                 : 'TTTech'
    , 'TTTech Automotive GmbH'    : 'TTTech Automotive'
    , 'TTTech Computertechnik AG' : 'TTTech'
    , 'TTControl srl Brixen'      : 'TTControl Srl Brixen'
    , 'TTControl srl / Brixen'    : 'TTControl Srl Brixen'
    , 'FTS Computertechnik GmbH'  : 'FTS'
    , 'TTControl GmbH / Wien'     : 'TTControl Srl Brixen'
    , 'TTTech GROUP'              : 'TTTech Group'
    }

rating_categories = \
    ( ('good impression',            1)
    , ('please contact responsible', 2)
    , ("don't order",                3)
    , ('evaluation required',        4)
    , ('evaluation on hold',         5)
    , ('inactive',                   6)
    )
rating_category_corr = \
    { "don \'t order" : "don't order"
    , 'Inactive'      : 'inactive'
    }

def set_supplier_rating (db, orgid, supid, ratid, scope, update = False) :
    srs = db.pr_supplier_rating.filter \
        (None, dict (supplier = supid, organisation = orgid))
    assert len (srs) <= 1
    if srs :
        sr = db.pr_supplier_rating.getnode (srs [0])
        d = {}
        if sr.rating != ratid :
            d ['rating'] = ratid
        if sr.scope != scope :
            d ['scope'] = scope
        if update and d :
            db.pr_supplier_rating.set (srs [0], **d)
        return srs [0]
    if not update :
        return '-1'
    return db.pr_supplier_rating.create \
        (supplier = supid, organisation = orgid, rating = ratid, scope = scope)
# end def set_supplier_rating

def main () :
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( 'filename'
        , help = 'CSV file'
        )
    cmd.add_argument \
        ( '-d', '--database-directory'
        , dest    = 'dir'
        , help    = 'Directory of roundup installation'
        , default = '.'
        )
    cmd.add_argument \
        ( '-D', '--delimiter'
        , dest    = 'delimiter'
        , help    = 'CSV delimiter'
        , default = ';'
        )
    cmd.add_argument \
        ( '-E', '--encoding'
        , dest    = 'encoding'
        , help    = 'CSV encoding'
        , default = 'utf-8'
        )
    cmd.add_argument \
        ( '-u', '--update'
        , help    = 'Update roundup with contents of supplier list'
        , default = False
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( "-U", "--user"
        , help    = "Database user"
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-v', '--verbose'
        , dest   = 'verbose'
        , help   = 'Verbose output'
        , action = 'count'
        )
    args = cmd.parse_args ()

    tracker = instance.open (args.dir)
    db      = tracker.open (args.user)

    if args.update :
        for name, order in rating_categories :
            try :
                db.pr_rating_category.lookup (name)
            except KeyError :
                db.pr_rating_category.create (name = name, order = order)
        db.commit ()

    f = open (args.filename, 'r')
    dr = DictReader (f, delimiter = args.delimiter)
    for rec in dr :
        enc = args.encoding
        ent = rec ['Entity'].decode (enc).strip ()
        if not ent :
            break
        ent = org_tr.get (ent, ent)
        if ent == 'TTTech Group' :
            orgs = db.organisation.filter (None, {})
        else :
            orgs = [db.organisation.lookup (ent.encode ('utf-8'))]
        sup = rec ['Name of Supplier'].decode (enc)
        if 'Creditor' in rec :
            sap = rec ['Creditor'].decode (enc) or ''
        else :
            sap = ''
        sap_e  = sap.encode ('utf-8')
        rats = \
            ( 'General Impression about Supplier->output LAS Meetings'
            , 'General Impression about Supplier'
            )
        for rating in rats :
            if rating not in rec :
                continue
            rat = rec [rating].decode (enc)
            rat = rating_category_corr.get (rat, rat)
            rat = rat.encode ('utf-8')
            break

        vcr = None
        s_id = None
        # Find by sap reference
        if 'ID' in rec and rec ['ID'] :
            s_id = rec ['ID'].strip ()
        elif sap_e :
            s = db.pr_supplier.filter (None, dict (sap_ref = sap_e))
            assert len (s) <= 1
            if s :
                s_id = s [0]
        else :
            trials = \
                (sup, sup.replace ('\n', ' '), sup.replace ('\n', ' ').strip ())
            for k in trials :
                try :
                    s_id = db.pr_supplier.lookup (k.encode ('utf-8'))
                    break
                except KeyError :
                    pass

        sup = sup.replace ('\n', ' ').strip ()
        rid = db.pr_rating_category.lookup (rat)
        if s_id is None :
            if args.verbose :
                print \
                    ("Create: name: %(sup)r org: %(ent)r sap: %(sap)r"
                     " r: %(rat)r"
                    % locals ()
                    )
            if args.update :
                s_id = db.pr_supplier.create \
                    ( name            = sup.encode ('utf-8')
                    , sap_ref         = sap_e
                    )
            continue
        supplier = db.pr_supplier.getnode (s_id)

        scope = rec ['Scope'].decode (enc).encode ('utf-8')
        for org in orgs :
            srid = set_supplier_rating (db, org, s_id, rid, scope, args.update)

        d        = {}
        if supplier.sap_ref != sap_e and sap_e :
            d ['sap_ref'] = sap_e
        sup = sup.encode ('utf-8')
        if supplier.name != sup :
            print "%r->%r" % (supplier.name, sup)
            d ['name'] = sup
        if d :
            if args.update :
                db.pr_supplier.set (s_id, ** d)
            if args.verbose :
                print ("Update: %s >%s< %r" % (s_id, supplier.name, d))
    if args.update :
        db.commit ()
# end def main

if __name__ == '__main__' :
    main ()
