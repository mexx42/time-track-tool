#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
import sys
import os
from roundup           import instance
from roundup.date      import Date
from argparse          import ArgumentParser
from email.Utils       import formatdate, formataddr
from email.mime.text   import MIMEText
from email.Charset     import Charset, QP
from smtplib           import SMTP, SMTPRecipientsRefused

class Renew_Reminder (object) :

    def __init__ (self, args) :
        self.args    = args
        self.tracker = instance.open (args.dir)
        self.db      = self.tracker.open (args.user)
        self.now     = Date ('.')
        self.reminder_by_user = {}
        sys.path.insert (1, os.path.join (args.dir, 'lib'))
        global common
        import common
    # end def __init__

    def format_reminder (self, pr) :
        url = self.tracker.config.TRACKER_WEB
        r   = []
        r.append \
            ( "purchase_request%s: Renew until %s"
            % (pr.id, pr.renew_until.pretty (common.ymd))
            )
        r.append ("    %s" % pr.title)
        r.append ("    %spurchase_request%s" % (url, pr.id))
        return '\n'.join (r)
    # end def format_reminder

    def print_reminder (self) :
        for uid in self.reminder_by_user :
            user = self.db.user.getnode (uid)
            print "User: %s" % formataddr ((user.realname, user.address))
            for prid in self.reminder_by_user [uid] :
                pr = self.reminder_by_user [uid][prid]
                print (self.format_reminder (pr))
    # end def print_reminder

    def get_agents (self, pr) :
        if pr.purchasing_agents :
            return [self.db.user.getnode (u) for u in pr.purchasing_agents]
        prop = None
        if pr.sap_cc :
            prop = self.db.sap_cc.getnode (pr.sap_cc)
        elif pr.time_project :
            prop = self.db.time_project.getnode (pr.time_project)
        if prop :
            return [self.db.user.getnode (u) for u in prop.purchasing_agents]
        return []
    # end def get_agents

    def remind (self) :
        db = self.db
        # get all PRs where renew-until is less than given days in the future
        period = ';%sd' % self.args.reminder_days
        prs = db.purchase_request.filter (None, dict (renew_until = period))
        for prid in prs :
            pr = db.purchase_request.getnode (prid)
            if self.args.verbose > 3 :
                print 'purchase_request%s' % pr.id
            # get users to notify for each pr
            users = []
            users.extend (self.get_agents (pr))
            users.append (db.user.getnode (pr.requester))
            users = [u for u in users if not u.want_no_messages]
            if self.args.verbose :
                print "purchase_request%s Notify:" % pr.id,
                for u in users :
                    print u.username,
                print "renew until: %s" % (pr.renew_until.pretty (common.ymd))
            for u in users :
                if u.id not in self.reminder_by_user :
                    self.reminder_by_user [u.id] = {}
                self.reminder_by_user [u.id][pr.id] = pr
        if self.args.mail :
            self.send_mail ()
        else :
            self.print_reminder ()
    # end def remind

    def send_mail (self) :
        utf8 = Charset ('utf-8')
        utf8.header_encoding = QP
        utf8.body_encoding   = QP
        message = MIMEText ('', 'plain', 'utf-8')
        message.set_charset (utf8)
        smtp = SMTP (self.args.mailhost)
        message ['Subject'] = 'Purchase Requests need renewal'
        message ['Date'] = formatdate ()
        frm = self.args.frm
        if '@' not in self.args.frm :
            frm = '@'.join ((frm, self.tracker.config.MAIL_DOMAIN))
        message ['From'] = formataddr (('Do not reply', frm))
        for uid in self.reminder_by_user :
            del message ['Content-Transfer-Encoding']
            del message ['To']
            user = self.db.user.getnode (uid)
            message ['To'] = to = formataddr ((user.realname, user.address))
            body = []
            for prid in self.reminder_by_user [uid] :
                pr = self.reminder_by_user [uid][prid]
                body.append (self.format_reminder (pr))
                body.append ('')
            body.append ('')
            body.append ('Best regards from your friendly reminder service')
            body.append ('')
            message.set_payload ('\n'.join (body), utf8)
            smtp.sendmail (frm, to, message.as_string ())
    # end def send_mail

# end class PR_Reminder

def main () :
    cmd = ArgumentParser ()
    cmd.add_argument \
        ( '-D', '--reminder-days'
        , help    = 'Number of days in the future for the reminder, '
                    'default=%(default)s'
        , type    = int
        , default = '%s' % (7 * 5)
        )
    cmd.add_argument \
        ( '-d', '--database-directory'
        , dest    = 'dir'
        , help    = 'Directory of roundup installation, default=%(default)s'
        , default = '.'
        )
    cmd.add_argument \
        ( '-f', '--from'
        , dest    = 'frm'
        , help    = 'From address for emails, if no domain given use maildomain'
        , default = 'do-not-reply'
        )
    cmd.add_argument \
        ( '-H', '--mailhost'
        , help    = 'Use given mail-host for smtp, default=%(default)s'
        , default = 'localhost'
        )
    cmd.add_argument \
        ( '-m', '--mail'
        , help    = 'Really send out email, otherwise only print reminders'
        , action  = 'store_true'
        )
    cmd.add_argument \
        ( '-u', '--user'
        , help    = 'Database user, default=%(default)s'
        , default = 'admin'
        )
    cmd.add_argument \
        ( '-v', '--verbose'
        , dest   = 'verbose'
        , help   = 'Verbose output'
        , action = 'count'
        )
    args = cmd.parse_args ()
    remind  = Renew_Reminder (args)
    remind.remind ()
# end def main

if __name__ == '__main__' :
    main ()
