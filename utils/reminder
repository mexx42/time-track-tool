#!/usr/bin/python
# Copyright (C) 2003-16 TTTech Computertechnik GmbH. All rights reserved
# Schoenbrunnerstrasse 7, A--1040 Wien, Austria. office@@tttech.com
# ****************************************************************************
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# ****************************************************************************

from __future__ import print_function
import os
import sys
import time
import argparse
from email.Utils        import formatdate, formataddr
from smtplib            import SMTP, SMTPRecipientsRefused
from roundup            import instance

#                 Minimum prio to warn
type_prio    = { 'Day' : 91,      'Week' : 40,       'Month' : 0 }
subject_type = { 'Day' : 'Daily', 'Week' : 'Weekly', 'Month' : 'Monthly' }

top_level_containers = dict.fromkeys \
    (( '5059'
    ,  '5060'
    ,  '5160'
    ,  '8769'
    ,  '9332'
    , '11000'
    , '12946'
    , '20861'
    , '23729'
    , '23988'
    , '24001'
    , '25162'
    , '25651'
    , '26373'
    , '26961'
    , '27183'
    , '27456'
    , '29065'
    , '29325'
    , '29326'
    , '29327'
    , '29729'
    , '29924'
    , '30093'
    , '30345'
    , '30434'
    , '30441'
    , '30442'
    , '30556'
    ))

format = \
    ( "%(missing_effort)1s %(id)5s %(category)-15.15s "
    + "%(status)-9s %(effective_prio)4.4s %(title)-40.40s"
    )

class user_report :
    heading = {"missing_effort" : " ", "effective_prio" : "priority"}
    for i in ['id','category','status','title'] :
        heading [i] = i

    def __init__ (self, user, report_lines, lonely_lines, eff_msg) :
        self.user         = user
        self.report_lines = report_lines
        self.lonely_lines = lonely_lines
        self.eff_msg      = eff_msg

    def report (self) :
        raise NotImplementedError

    def __str__ (self) :
        s = []
        if self.report_lines :
            s.append ("%s\n%s\n" % (self.eff_msg, format % self.heading))
            for l in self.report_lines :
                s.append ("%s\n" % l)
            s.append ("\n")
        if self.lonely_lines :
            s.append ("Please attach the following reports to a container:\n")
            s.append (format % self.heading)
            s.append ("\n")
            for l in self.lonely_lines :
                s.append ("%s\n" % l)
        return "".join (s)

    def mail (self, smtp, header, frm) :
        to    = "To: %s" % self.user
        fm    = "From: %s" % formataddr (frm)
        date  = "Date: %s" % formatdate (time.time (), True)
        mime  = \
            [ 'Mime-Version: 1.0'
            , 'Content-Type: text/plain; charset=UTF-8'
            , 'Content-Transfer-Encoding: 8bit'
            ]
        smtp.sendmail \
            ( frm [-1]
            , self.user
            , '\n'.join \
                ( header
                + [to, fm, date, "X-" + date]
                + mime
                + ["\n", str (self)]
                )
            )
# end class user_report

def print_results (user_reports) :
    for user, report in user_reports.iteritems () :
        print ("%s:\n" % user, str (report))

class Fake_Smtp (object) :

    def __init__ (self, hostname) :
        self.hostname = hostname
    # end def __init__

    def sendmail (self, frm, to, content) :
        print ("SENDING VIA: %s" % self.hostname)
        print ('Envelope-from: %s' % frm)
        print ('Envelope-to: %s'   % to)
        print (content)
        print ("\n")

# end class Fake_Smtp


def mail_results (user_reports) :
    global admin_email, admin_name
    global args
    frm = (admin_name, admin_email)
    smtpclass = SMTP
    if args.debug_smtp :
        smtpclass = Fake_Smtp
    smtp = smtpclass (args.hostname)
    header = \
        [ "Subject: %s Summary of pending bug reports"
        % subject_type [args.report_type]
        ]
    for report in user_reports.values () :
        try :
            report.mail (smtp, header, frm)
        except SMTPRecipientsRefused, cause :
            print >> sys.stderr, cause
# end def mail_results

cmd     = argparse.ArgumentParser ()
cmd.add_argument \
    ( '-D', '--debug-smtp'
    , help    = 'Debug SMTP instead of sending email'
    , action  = 'store_true'
    )
cmd.add_argument \
    ( '-m', '--mail'
    , help    = 'Email reminder to responsible person(s)'
    , action  = 'store_true'
    )
cmd.add_argument \
    ( '-H', '--email-hostname'
    , help    = 'Hostname used for sendmail'
    , default = 'localhost'
    , dest    = 'hostname'
    )
cmd.add_argument \
    ( '-r', '--report_type'
    , help    = 'Report type, one of %s' % ', '.join (type_prio.keys ())
    , default = 'Week'
    )
cmd.add_argument \
    ( '-t', '--tracker'
    , help    = 'Tracker home directory'
    , default = '/roundup/tracker/ttt'
    )
cmd.add_argument \
    ( '-u', '--user'
    , help    = 'User for opening the tracker'
    , default = 'admin'
    )
args = cmd.parse_args ()

out_fun = print_results
if args.mail :
    out_fun = mail_results
if args.report_type not in type_prio :
    print ('Wrong type: "%s"', file = sys.stderr)
    cmd.usage ()

tracker = instance.open (args.tracker)
minprio = type_prio [args.report_type]

db = tracker.open (args.user)
admin_email = db.config.ADMIN_EMAIL
admin_name  = db.config.EMAIL_FROM_TAG
admin_email = getattr (db.config.ext, 'MAIL_SENDER_ADDR', admin_email)
admin_name  = getattr (db.config.ext, 'MAIL_SENDER_NAME', admin_name)

sys.path.insert (1, os.path.join (tracker.tracker_home, 'lib'))
from prettynode import prettynode

user_reports = {}
status_filter = ['suspended', 'closed']
stati = [id for id in db.status.getnodeids ()
         if db.status.get (id, 'name') not in status_filter
        ]
for user in  db.user.list () :
    report_lines = []
    lonely_lines = []
    eff_msg      = ""
    filterspec = \
       { 'responsible' : user
       , 'status'      : stati
       }
    for issue_id in db.issue.filter \
        (None, filterspec, sort = ('+','id'), group = ('-', 'effective_prio')) :
        issue = db.issue.getnode (issue_id)
        pretty = prettynode (issue)
        if not issue.part_of and not top_level_containers.has_key (issue.id) :
            lonely_lines.append (format % pretty)
        if issue.composed_of and args.report_type == "Day" : continue
        prio = pretty ["priority"] or 0
        if pretty ["effective_prio"] is not None :
            prio = pretty ["effective_prio"]
        if int (prio) < minprio : continue
        report_lines.append (format % pretty)
        if pretty ["missing_effort"] :
            eff_msg = 'Please estimate effort for issues marked with "*".'
    if report_lines or lonely_lines :
        adr = db.user.get (user, 'address')
        user_reports [adr] = user_report \
            (adr, report_lines, lonely_lines, eff_msg)
db.close ()

out_fun (user_reports)
