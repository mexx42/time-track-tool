#!/bin/sh

TRACKER=/usr/local/lib/roundup/roundup
BACKUPDIR=/usr/local/lib/roundup/backup
ROUNDUP_ADMIN=/usr/local/bin/roundup-admin
USE_CURRENT=1

### WARNING ###
### WARNING ###
### WARNING ###
# If the following is specified, an import will be done for the given
# tracker with the data exported from the tracker above. ALL DATA WILL
# BE DESTROYED in the RESTORE tracker!!!!!
# Make sure -- if you are using the same backend for the RESTORE
# tracker, that it uses a different database from the TRACKER to backup!
# This means the "name" property in the "[rdbms]" section of
# "config.ini" *must* be different for both trackers !!!
### WARNING ###
### WARNING ###
### WARNING ###
RESTORE=/usr/local/lib/roundup/restore
RESTOREPW="xyzzy"

if [ "${TRACKER}" = "${RESTORE}" ] ; then
    echo "READ COMMENTS. You don't want to overwrite your tracker?!"
    exit 42
fi

RESTOREDBNAME=$(${RESTORE}/utils/getdbname ${RESTORE})
TRACKERDBNAME=$(${TRACKER}/utils/getdbname ${TRACKER})

if [ "${TRACKERDBNAME}" = "${RESTOREDBNAME}" ] ; then
    echo "tracker and restore DB configured to use same database"
    echo "READ COMMENTS. You don't want to overwrite your tracker?!"
    exit 42
fi

dir=${BACKUPDIR}/backup-$(date +%a)
if [ -n "$USE_CURRENT" ] ; then
    dir=${BACKUPDIR}/current
    old=${BACKUPDIR}/backup-$(date -d yesterday +%a)
    rm -rf $old
    mv ${dir} ${old}
fi
echo Backing up $TRACKER to $dir
rm -rf $dir
mkdir $dir

$ROUNDUP_ADMIN -i $TRACKER export $dir
cp $TRACKER/config.ini $dir
cp $RESTORE/config.ini $dir/config.ini.restore

if [ -n "$RESTORE" ] ; then
    echo Restoring from $dir to $RESTORE Restore DB: $RESTOREDBNAME
    cp $TRACKER/db/backend_name $RESTORE/db
    echo y | $ROUNDUP_ADMIN -i $RESTORE init ${RESTOREPW}
    cp $TRACKER/db/backend_name $RESTORE/db
    $ROUNDUP_ADMIN -i $RESTORE import $dir
fi

# re-create html/userlist.html in restored tracker.
(cd $RESTORE ; utils/userlist.py)
